package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.PLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLOCATION.
*/
public class PLocationDao extends AbstractDao<PLocation, Long> {

    public static final String TABLENAME = "PLOCATION";

    /**
     * Properties of entity PLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SvId = new Property(1, Long.class, "svId", false, "SV_ID");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property IsDelete = new Property(4, Boolean.class, "isDelete", false, "IS_DELETE");
        public final static Property TimeStamp = new Property(5, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property CSGTType = new Property(6, String.class, "CSGTType", false, "CSGTTYPE");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Count = new Property(8, Integer.class, "count", false, "COUNT");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property IsReported = new Property(10, Boolean.class, "isReported", false, "IS_REPORTED");
        public final static Property Note = new Property(11, String.class, "note", false, "NOTE");
        public final static Property IsEnter = new Property(12, boolean.class, "isEnter", false, "IS_ENTER");
    };


    public PLocationDao(DaoConfig config) {
        super(config);
    }
    
    public PLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLOCATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'SV_ID' INTEGER UNIQUE ," + // 1: svId
                "'LATITUDE' REAL," + // 2: latitude
                "'LONGITUDE' REAL," + // 3: longitude
                "'IS_DELETE' INTEGER," + // 4: isDelete
                "'TIME_STAMP' TEXT," + // 5: timeStamp
                "'CSGTTYPE' TEXT," + // 6: CSGTType
                "'TYPE' TEXT," + // 7: type
                "'COUNT' INTEGER," + // 8: count
                "'STATUS' INTEGER," + // 9: status
                "'IS_REPORTED' INTEGER," + // 10: isReported
                "'NOTE' TEXT," + // 11: note
                "'IS_ENTER' INTEGER NOT NULL );"); // 12: isEnter
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long svId = entity.getSvId();
        if (svId != null) {
            stmt.bindLong(2, svId);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        Boolean isDelete = entity.getIsDelete();
        if (isDelete != null) {
            stmt.bindLong(5, isDelete ? 1l: 0l);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(6, timeStamp);
        }
 
        String CSGTType = entity.getCSGTType();
        if (CSGTType != null) {
            stmt.bindString(7, CSGTType);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(9, count);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Boolean isReported = entity.getIsReported();
        if (isReported != null) {
            stmt.bindLong(11, isReported ? 1l: 0l);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
        stmt.bindLong(13, entity.getIsEnter() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PLocation readEntity(Cursor cursor, int offset) {
        PLocation entity = new PLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // svId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isDelete
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CSGTType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // count
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isReported
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // note
            cursor.getShort(offset + 12) != 0 // isEnter
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSvId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setIsDelete(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setTimeStamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCSGTType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsReported(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsEnter(cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
